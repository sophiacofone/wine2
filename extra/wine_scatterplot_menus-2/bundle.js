(function () {
  'use strict';

  const dropdown_menu = (selection, props) => {
    const {
      options,
      onOptionClicked
    } = props;
    
    let select = selection.selectAll('select').data([null]);
    select = select.enter().append('select')
      .merge(select)
    		.on('change', function() {
      		onOptionClicked(this.value);
    	});
    
    const option = select.selectAll('option').data(options);
    option.enter().append('option')
    	.merge(option)
    		.attr('value',d => d)
    		.text(d => d);
  };

  const scatterplot = (selection, props) => {
    const {
      xValue,
      xAxisLabel,
      yValue,
      circleRadius,
      yAxisLabel,
      margin,
      width,
      height,
      data,
      wine_type
    } = props;
    
    //filtering by wine type
    let filtered_data;
    let circleColor;
    
      if (wine_type === 'White Wine') {
      filtered_data = data.filter(d => d.wine_type === 'white');
      circleColor = 'GoldenRod';
    } else {
        filtered_data = data.filter(d => d.wine_type === 'red');
      	circleColor = 'maroon';
      }
    
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();
    
    const yScale = d3.scaleLinear();
    yScale.domain(d3.extent(data, yValue));
    yScale.range([innerHeight, 0]);
    yScale.nice();
    
    const g = selection.selectAll('.container').data([null]);
    const gEnter = g
      .enter().append('g')
        .attr('class', 'container');
    gEnter
      .merge(g)
        .attr('transform',
          `translate(${margin.left},${margin.top})`
        );
    
    const xAxis = d3.axisBottom(xScale)
      .tickSize(-innerHeight)
      .tickPadding(15);
    
    const yAxis = d3.axisLeft(yScale)
      .tickSize(-innerWidth)
      .tickPadding(10);
    
    const yAxisG = g.select('.y-axis');
    const yAxisGEnter = gEnter
      .append('g')
        .attr('class', 'y-axis');
    yAxisG
      .merge(yAxisGEnter)
        .call(yAxis)
        .selectAll('.domain').remove();
    
    const yAxisLabelText = yAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', -53)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
      .merge(yAxisG.select('.axis-label'))
        .attr('x', -innerHeight / 2)
        .text(yAxisLabel);
    
    
    const xAxisG = g.select('.x-axis');
    const xAxisGEnter = gEnter
      .append('g')
        .attr('class', 'x-axis');
    xAxisG
      .merge(xAxisGEnter)
        .attr('transform', `translate(0,${innerHeight})`)
        .call(xAxis)
        .selectAll('.domain').remove();
    
    const xAxisLabelText = xAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', 65)
        .attr('fill', 'black')
      .merge(xAxisG.select('.axis-label'))
        .attr('x', innerWidth / 2)
        .text(xAxisLabel);

    
    const circles = g.merge(gEnter)
      .selectAll('circle').data(filtered_data);
    circles
      .enter().append('circle')
        .attr('cx', innerWidth / 2)
        .attr('cy', innerHeight / 2)
        .attr('r', 0)
      	.style("fill", circleColor)
      .merge(circles)
      .transition().duration(1000)
      .delay((d, i) => i * .5)
        .attr('cy', d => yScale(yValue(d)))
        .attr('cx', d => xScale(xValue(d)))
        .attr('r', circleRadius);
  };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  let data;

  let xColumn;
  let yColumn;
  let wine_type;

  const onXColumnClicked = column => {
    xColumn = column;
    render();
  };

  const onYColumnClicked = column => {
    yColumn = column;
    render();
  };

  const onDatasetClicked = column => {
    wine_type = column;
    render();
  };

  const render = () => {
    d3.select('#x-menu')
      .call(dropdown_menu, {
    		options: ['fixed_acidity','volatile_acidity','citric_acid','residual_sugar','chlorides','free_sulfur_dioxide','pH','sulphates','alcohol','quality'],
        onOptionClicked: onXColumnClicked,
        selectedOption: xColumn
      });
    
    d3.select('#y-menu')
      .call(dropdown_menu, {
    		options: ['fixed_acidity','volatile_acidity','citric_acid','residual_sugar','chlorides','free_sulfur_dioxide','pH','sulphates','alcohol','quality'],
        onOptionClicked: onYColumnClicked,
        selectedOption: yColumn
      });
    
    d3.select('#data-menu')
      .call(dropdown_menu, {
        options: ['Red Wine','White Wine'],
        onOptionClicked: onDatasetClicked
      });

    svg.call(scatterplot, {
      xValue: d => d[xColumn],
      xAxisLabel: xColumn,
      yValue: d => d[yColumn],
      circleRadius: 10,
      yAxisLabel: yColumn,
      margin: { top: 10, right: 40, bottom: 150, left: 100 },
      width,
      height,
      data,
      wine_type
    });
  };

  d3.csv('data_wine.csv')
    .then(loadedData => {
      data = loadedData;
      data.forEach(d => {
       d.fixed_acidity = +d.fixed_acidity;
        d.volatile_acidity = +d.volatile_acidity;
        d.citric_acid = +d.citric_acid;
        d.residual_sugar = +d.residual_sugar;
        d.chlorides = +d.chlorides;
        d.free_sulfur_dioxide = +d.free_sulfur_dioxide;
        d.density = +d.density;
        d.pH = +d.pH;
        d.sulphates = +d.sulphates;
        d.alcohol = +d.alcohol;
        d.quality = +d.quality;
        d.wine_type = d.wine_type;
      });
      xColumn = data.columns[0];
      yColumn = data.columns[0];
    	wine_type = 'Red Wine';
    	render();
      
    });

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,